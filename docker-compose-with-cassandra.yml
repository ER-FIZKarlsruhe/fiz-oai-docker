version: '3.3'
services:

  cassandra-oai:
    hostname: cassandra-oai
    image: cassandra:${OAI_CASSANDRA_VERSION_ENV}
    environment:
      LOG4J_FORMAT_MSG_NO_LOOKUPS: "true"
    user: "999:999"
    volumes:
      - ${OAI_INSTALL_DIRECTORY_ENV}/data/cassandra:/var/lib/cassandra/
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/cassandra/cassandra.yaml:/etc/cassandra/cassandra.yaml
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/cassandra/cassandra-env.sh:/etc/cassandra/cassandra-env.sh
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/cassandra/jmxremote.access:/opt/java/openjdk/lib/management/jmxremote.access
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/cassandra/jmxremote.password:/etc/cassandra/jmxremote.password
    ports:
      - '9042:9042'
    restart: always

  cassandra-oai-setup:
    hostname: cassandra-oai-setup
    image: cassandra:${OAI_CASSANDRA_VERSION_ENV}
    depends_on:
      - cassandra-oai
    command: ["/wait-for-it.sh","cassandra-oai:9042","-t","0","--", "sh", "/init-fizoai-database.sh"]
    volumes:
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/cassandra/init-fizoai-database.sh:/init-fizoai-database.sh:ro
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/cassandra/wait-for-it.sh:/wait-for-it.sh:ro
    restart: always

  cassandra-backup:
    hostname: cassandra-backup
    image: docker.dev.fiz-karlsruhe.de/cassandra-backup:${OAI_CASSANDRA_BACKUP_VERSION_ENV}
    environment:
      JAVA_OPTS: "-Dlog4j2.formatMsgNoLookups=true"
      LOG4J_FORMAT_MSG_NO_LOOKUPS: "true"
    env_file:
      - .cassandra_dump_env
    volumes:
      - ${OAI_INSTALL_DIRECTORY_ENV}/logs/cassandra-backup:/logs
      - ${OAI_INSTALL_DIRECTORY_ENV}/data/cassandra:/source_data
      - ${OAI_INSTALL_DIRECTORY_ENV}/data/cassandra-backup:/backup
    depends_on:
      - cassandra-oai
    restart: always


  elasticsearch-oai:
    hostname: elasticsearch-oai
    image: docker.elastic.co/elasticsearch/elasticsearch:${OAI_ELASTICSEARCH_VERSION_ENV}
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Xms${OAI_ELASTICSEARCH_MEMORY_ENV} -Xmx${OAI_ELASTICSEARCH_MEMORY_ENV}"
      - "LOG4J_FORMAT_MSG_NO_LOOKUPS=true"
      - discovery.type=single-node
    healthcheck:
      test: ["CMD", "/checkEsHealth.sh"]
      interval: 10s
      timeout: 10s
      retries: 20
    ulimits:
      memlock:
        soft: -1
        hard: -1
    user: "1000:1000"
    volumes:
      - ${OAI_INSTALL_DIRECTORY_ENV}/logs/elasticsearch_oai:/usr/share/elasticsearch/logs
      - ${OAI_INSTALL_DIRECTORY_ENV}/data/elasticsearch_oai/es-data:/usr/share/elasticsearch/es-data
      - ${OAI_INSTALL_DIRECTORY_ENV}/data/elasticsearch_oai/backup:/usr/share/elasticsearch/backup
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/elasticsearch_oai/oai-elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/elasticsearch_oai/checkEsHealth.sh:/checkEsHealth.sh
    ports:
      - '9200:9200'
    restart: always

  elasticsearch-oai-setup:
    hostname: elasticsearch-oai-setup
    image: centos
    depends_on:
      elasticsearch-oai:
        condition: service_healthy
    command: ["sh", "/init-fizoai-elasticsearch.sh"]
    volumes:
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/elasticsearch_oai/init-fizoai-elasticsearch.sh:/init-fizoai-elasticsearch.sh:ro
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/elasticsearch_oai/item_mapping_es_v${OAI_ELASTICSEARCH_MAPPING_VERSION_ENV}:/item_mapping_es:ro
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/elasticsearch_oai/wait-for-it.sh:/wait-for-it.sh:ro
    restart: always

  oai-backend:
    hostname: oai-backend
    image: docker.dev.fiz-karlsruhe.de/oai-backend:${OAI_BACKEND_VERSION_ENV}
    environment:
      - "LOG4J_FORMAT_MSG_NO_LOOKUPS=true"
      - "CATALINA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true"
    depends_on:
      cassandra-oai-setup:
        condition: service_completed_successfully
      elasticsearch-oai-setup:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "/checkBackendHealth.sh"]
      interval: 10s
      timeout: 10s
      retries: 20
    volumes:
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/oai_backend/fiz-oai-backend.properties:/usr/local/tomcat/conf/fiz-oai-backend.properties:ro
      - ${OAI_INSTALL_DIRECTORY_ENV}/logs/oai_backend/:/usr/local/tomcat/logs
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/oai_backend/checkBackendHealth.sh:/checkBackendHealth.sh
    ports:
      - '8081:8080'
    restart: always

  oai-provider:
    hostname: oai-provider
    image: docker.dev.fiz-karlsruhe.de/oai-provider:${OAI_FRONTEND_VERSION_ENV}
    environment:
      - "LOG4J_FORMAT_MSG_NO_LOOKUPS=true"
      - "CATALINA_OPTS=-Dlog4j2.formatMsgNoLookups=true -Dorg.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH=true"
    depends_on:
      oai-backend:
        condition: service_healthy
    volumes:
      - ${OAI_INSTALL_DIRECTORY_ENV}/configs/oai_provider/oaicat.properties:/usr/local/tomcat/conf/oaicat.properties:ro
      - ${OAI_INSTALL_DIRECTORY_ENV}/logs/oai_provider/:/usr/local/tomcat/logs
    ports:
      - '8080:8080'
    restart: always
